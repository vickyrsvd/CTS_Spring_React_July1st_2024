https://stackoverflow.com/questions/51154177/extends-websecurityconfigureradapter-cannot-be-resolved
Java 
=========
keywords

Datatypes



identifier

variables

\*

*/

class Welcome  //PascalCase
{
	public static void main(String args[])
	{
		System.out
	}
}
		translator
		
		compiler--->javac filename.java
		
					.class file
			
		execution--->JVM
		
	INSTALLATIONS:	
		java 17 
		eclipse
		STS
		mysql
		postman
		
		nodejs
		VScode
		react
		
Exception handling 
		try,catch,finally,throw,throws

collections
		
		array--->group of values which are similar type
		
		List,Set,Queue,Map
		
		
Spring framework:		
		
				ready made 

		2 types 
			
			invasive		it will force to the developer to implement predefined api
			non-invasive 	it will never force to the developer to implement predefined api
			
	spring is non-invasive framework which is used to create 
			light weight and loosley coupled application		
			
			invasive  		struts,ejb
			non-invasive 	spring,hibernate 		
			
			light weight 
			heavy weight
			
			
			loosley coupled 
			tighlty coupled


servlet,EJB --->Rod Johnson -->interface21-->spring -->2003
	
		spring

	class Login implements HttpServlet  -11 
		{
		
		
		}
		1*11s
	heavy weight 

	light weight 



	loosley coupled 
	tighlty coupled
	
class Test
{
	Test()
	{
	}

}


class Client
{
	Test test=new Test();//tightly coupled


}

loosley coupled spring  -->container-->BeanFactory,ApplicationContext

Object life cycle
1)creation of object
2)wiring the object
3)configuring the object
4)destroying the object

		IOC-->inversion of control --->dependency injection


		configuration file:xml,java,annotation
						<beans><bean id class> /@Component,@ComponentScan, @Configuration
		20+ 22
		
		spring core module

		2003 1.x  rod johnson  EJB		spring boot 3.x-->17
		6.x
		
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-core</artifactId>
    <version>6.1.3</version>
</dependency>
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>6.1.3</version>
</dependency>
  
	@Component
	class Employee{
	
	
	}
	@Configuration
	@ComponentScan("packagename")
	class Test
	{
	
	}

https://survey.zohopublic.com/zs/C4BTP1		Springboot



	
https://survey.zohopublic.com/zs/ZSBTwU      react



Layared Architecture:
======================
		separation of concern
		
			three layers			
			
		presentation layer
		
		service  layer
		
		persitance layer/DAO Layer
		
		
		@Component
		
@Service	@Repository  @Controller		
		
		
		
		@Service
		class ServiceLayer
		{
		
		
		
		}
		
		@Repository
		class DaoLayer
		{
		
		
		
		}
		@Controller
		class ControllerClass 
		{
		
		
		}
		
		
		@Component
		@ComponentScan
		@Configuration
		@Service
		@COntroller
		@Repository
		@Autowired
		@Bean
		@Qualifier
		@Primary
		@Value
		@PropertySource
		
 20+
		spring core
		spring jpa
		spring aop
		spring jdbc
		spring orm
		spring web
		spring rest
		.....
		
		
		
Mysql Querys:
===============#DDL-->create,alter,drop,truncate,rename 
#DML-->insert,update,delete
#DRL-->select
create database cts;
use cts;
create table employees(eid int,ename varchar(20),esal float,edesg varchar(10));
alter table employees add column address varchar(20);
describe employees;
alter table employees drop address;
alter table employees change eid empno int;
alter table employees rename to emps;
describe emps;
drop table emps;
truncate table emps;
#DML-i,u,d
insert into employees values(123,'suresh',9000,'developer');
insert into employees values(124,'naresh',32111,'trainer');
insert into employees values(125,'rajesh',32222,'admin');
insert into employees values(555,'swetha',76544,'admin');
insert into employees values(126,'hitesh',65554,'hr');
insert into employees values(127,'mahesh',74234,'developer');
select * from employees;
select eid from employees;
select eid,ename from employees;
update employees set esal=esal+5000 where edesg='developer';
update employees set edesg="ceo";
delete from employees where esal>60000;
delete from employees;
truncate table employees;

select max(esal) from  employees;
select max(esal) from  employees where esal<(select max(esal) from  employees);
select min(esal) from  employees;
select sum(esal) from  employees;
select avg(esal) from  employees;
select sum(esal),edesg from employees group by edesg;
select * from  employees order by ename desc ;
#constraints nn,check,unique,pk,fk

create table emp_info(eid int primary key,ename varchar(20) not null,esal float check(esal>10000),edesg varchar(10));
select * from  emp_info;
insert into emp_info(eid,esal) values(123,19000);

insert into employees(eid,esal) values(123,19000);
	

	configuration
	
	NOTE:spring has given annotations for userdefined classes  but not for predefined classes
	
		explicit config java config/xml config
		maven dependencies
		server

Spring Boot:		3.x
===========	

		1)auto configuration: most of the commonly used classes already configured by the spring boots

		2)starters
		
		3)embeded server  -->tomcat
		
		4)actuators   /health,/beans,/metrics,/env....
		
		5)inbuilt DB		-->h2
		
		
		
		STS--->
		
		spring intializer
		


	@SpringBootApplication


	JDBC API:-->sun
	
		java database connectivity

	
	mysql <--->java

JPA 
		1)no checked exceptions
		2)no table creation
		3)no querys 
		4)cache 
		5)no boiler plate code s
		
		
		
		JPA 		-->specification sun
		
		HIBERNATE   -->implementations


		jpa
		
hibernate,eclipselink,toplink,ibatis.....ORM tools		


@Entity
@Table("emp_info")
class Employee{
@Column(empno,size-10)
@Id
	eid
	ename
	esal
	desg
	add....

}


persistence.xml

<persistence>
	<persistence-unit>
		<property>
	
		
		persist,merge,remove,find--->1 row
		
		JPQL--->java persistence query language
		
		mysql
		
		
		select * from employees_info;//mysql
		
		select e from employee e;
		
		
	employeeManagement App:

		1.Add employee
		2.update employee
		3.delete employee
		4.get employee by id
		5.get all employees
		6.get all employees between prices
		7.get all employees by category
		
		
		H2 DB
		
		controller
		
		
		
		Controller
		
		RestController
		
		webservices		--->SOAP(XML),REST(XML,Json,html,pt,js)
		
				JSON
				
				JSON--->jackson
				
				java --->xml-->jax-b
				
		SP,RMI,EJB,DCOM,CORBA,RPC
		
				 x atm			bank app
				machine
				java			python
				
			sbi atm card	
				
				
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.show-sql=true
spring.h2.console.enabled=true
spring.h2.console.path=/h2
				
				
	EmployeeManagement App:
								Employee:empid,empname,empsal,empdesg
		1.Add employee
		2.update employee
		3.delete employee
		4.get employee by id
		5.get all employees
		6.get all employees between Salay
		7.get all employees by Designation
		
		
		Validations:
		
	CrudRepository	-->CRUD 
	
		JpaRepositorys
		
			CRUD+pagingsorting
		
		
		DSL Grammer
		
		https://stackabuse.com/guide-to-spring-data-jpa/
		
		
		
		
		
		
		
